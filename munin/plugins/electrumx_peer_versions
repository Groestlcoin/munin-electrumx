#!/bin/sh
# -*- sh -*-

: << =cut

=head1 NAME

electrumx_peer_versions - Plugin to monitor ElectrumX server.

=head1 CONFIGURATION

No configuration

=head1 NOTES

Uses the command "electrumx_rpc.py"

=head1 AUTHOR

shsmith

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

electrumx_rpc=/usr/local/bin/electrumx_rpc.py

# return count+1 and version for current and all previously seen versions
known_versions() {
	vfile=/tmp/electrumx_peer_versions

	# get new version items, sanitize as valid munin identifiers
	${electrumx_rpc} peers | cut -c51-68 | grep -v Server | sed 's/ /_/g; s#/#AA#g; s/[^a-zA-Z0-9_]/-/g; s/-*$//' > ${vfile}.new

	# combine with previously known versions
	if [ -e ${vfile}.known ]; then
		cat ${vfile}.known >> ${vfile}.new
	fi
	sort < ${vfile}.new | uniq > ${vfile}.known

	# return count+1 and version
	# limit to the most active 100 versions and sorted by reverse version number
	sort < ${vfile}.new | uniq -c | sort -n -r | head -n 100 | sort -V -r -k 2
}

if [ "$1" = "autoconf" ]; then
	if ( ${electrumx_rpc} getinfo >/dev/null 2>&1 ); then
		echo yes
		exit 0
	else
		if [ $? -eq 127 ]; then
			echo "no (could not run \"${electrumx_rpc}\")"
			exit 0
		else
			echo no
			exit 0
		fi
	fi
fi

if [ "$1" = "config" ]; then
	echo 'graph_title Electrum Peer Versions'
	echo 'graph_args --base 1000 -l 0'
	echo 'graph_vlabel peers'
	echo 'graph_category ElectrumX'
	known_versions | awk '{v=$2; gsub("-",".",$2); gsub("AA","/"); gsub("_"," ",$2); printf "version_%s.label %s\nversion_%s.draw AREASTACK\n", v, $2, v}'
	exit 0
fi

# subtract 1 from each count (allows 0 to be retained in historical charts)
known_versions | awk '{printf "version_%s.value %d\n", $2, $1-1}'
